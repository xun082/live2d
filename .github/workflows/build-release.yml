name: Build Release

on:
  push:
    branches: ['main']
    tags: ['v*.*.*']
  pull_request:
    branches: ['main']
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: true
        type: boolean
      draft:
        description: 'Create as draft release'
        required: false
        default: false
        type: boolean

# 给予 GITHUB_TOKEN 写仓库内容的权限，避免 403
permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS arm64
          - platform: macos-latest
            target: aarch64-apple-darwin
            arch: arm64
            bundle: dmg
            rust-targets: aarch64-apple-darwin
          # macOS x64
          - platform: macos-latest
            target: x86_64-apple-darwin
            arch: x64
            bundle: dmg
            rust-targets: x86_64-apple-darwin
          # Windows x64
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x64
            bundle: msi,nsis
            rust-targets: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-targets }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Switch to Tauri mode
        run: pnpm run switch:tauri

      - name: Build frontend
        run: pnpm run build

      - name: Get package version
        id: version
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const version = JSON.parse(fs.readFileSync('./package.json','utf8')).version;
            core.setOutput('version', version);
            return version;

      - name: Build Tauri App (No Release)
        if: github.event_name == 'pull_request'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: --target ${{ matrix.target }} --bundles ${{ matrix.bundle }}

      - name: Build Tauri App (With Release)
        if: github.event_name != 'pull_request'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          args: --target ${{ matrix.target }} --bundles ${{ matrix.bundle }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-artifacts
          path: |
            src-tauri/target/**/release/bundle/**/*.dmg
            src-tauri/target/**/release/bundle/**/*.msi
            src-tauri/target/**/release/bundle/**/*.exe
            src-tauri/target/**/release/bundle/**/*.app.tar.gz
          retention-days: 30
          if-no-files-found: warn

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: >
      always() &&
      needs.build.result == 'success' &&
      github.event_name != 'pull_request' &&
      (github.ref == 'refs/heads/main' ||
       startsWith(github.ref, 'refs/tags/') ||
       github.event.inputs.create_release == 'true')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get package version and tag info
        id: version
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const version = JSON.parse(fs.readFileSync('./package.json','utf8')).version;
            let tagName, isPrerelease = false;
            if (context.ref.startsWith('refs/tags/')) {
              tagName = context.ref.replace('refs/tags/','');
              isPrerelease = /beta|alpha|rc/i.test(tagName);
            } else if (context.ref === 'refs/heads/main') {
              tagName = `v${version}`;
            } else {
              tagName = `v${version}-build-${context.runNumber}`;
              isPrerelease = true;
            }
            core.setOutput('version', version);
            core.setOutput('tag_name', tagName);
            core.setOutput('is_prerelease', isPrerelease);

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display downloaded artifacts
        run: |
          echo "📦 Downloaded artifacts:"
          find ./artifacts -type f -name "*" | sort
          echo ""
          echo "📊 File sizes:"
          find ./artifacts -type f -exec ls -lh {} \; | awk '{print $5, $9}'

      - name: Organize & rename artifacts
        run: |
          set -e
          VERSION='${{ steps.version.outputs.version }}'
          mkdir -p ./release-files/{macos,windows}

          # macOS: 将 arm64 / x64 分开并重命名
          ARM_DMG=$(find ./artifacts -name "*.dmg" -path "*apple-darwin*/**" -o -name "*_aarch64*.dmg" | head -n 1 || true)
          X64_DMG=$(find ./artifacts -name "*.dmg" -path "*x86_64-apple-darwin*/**" -o -name "*_x64*.dmg" | head -n 1 || true)

          if [ -n "$ARM_DMG" ]; then
            cp "$ARM_DMG" "./release-files/macos/digital-life_${VERSION}_mac_arm64.dmg"
          fi
          if [ -n "$X64_DMG" ]; then
            cp "$X64_DMG" "./release-files/macos/digital-life_${VERSION}_mac_x64.dmg"
          fi

          # Windows
          find ./artifacts -name "*.msi" -exec cp {} ./release-files/windows/ \;
          find ./artifacts -name "*.exe" -exec cp {} ./release-files/windows/ \;

          echo "📁 Organized release files:"
          find ./release-files -type f | sort

      - name: Generate checksums
        run: |
          cd ./release-files
          find . -type f \( -name "*.dmg" -o -name "*.msi" -o -name "*.exe" \) -exec sha256sum {} \; > ../SHA256SUMS.txt
          echo "🔐 Generated checksums:"
          cat ../SHA256SUMS.txt

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          name: Digital Life ${{ steps.version.outputs.version }}
          body: |
            ## 🚀 Digital Life ${{ steps.version.outputs.version }}

            ### 📦 Downloads

            **🍎 macOS**
            - Apple Silicon (arm64): `digital-life_${{ steps.version.outputs.version }}_mac_arm64.dmg`

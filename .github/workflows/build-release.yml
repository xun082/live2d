name: Build Release

on:
  push:
    branches: ['main']
    tags: ['v*.*.*']
  pull_request:
    branches: ['main']
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: true
        type: boolean
      draft:
        description: 'Create as draft release'
        required: false
        default: false
        type: boolean

# 给予 GITHUB_TOKEN 写仓库内容的权限，避免 403
permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS arm64
          - platform: macos-latest
            target: aarch64-apple-darwin
            arch: arm64
            bundle: dmg
            rust-targets: aarch64-apple-darwin
          # macOS x64
          - platform: macos-latest
            target: x86_64-apple-darwin
            arch: x64
            bundle: dmg
            rust-targets: x86_64-apple-darwin
          # Windows x64
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x64
            bundle: msi,nsis
            rust-targets: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-targets }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Switch to Tauri mode
        run: pnpm run switch:tauri

      - name: Configure signing for CI (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "✅ macOS 环境：使用临时开发签名"
          echo "当前 macOS 签名配置："
          cat src-tauri/tauri.conf.json | grep -A 5 '"macOS"' || echo "未找到 macOS 配置"

      - name: Configure signing for CI (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "✅ Windows 环境：无需签名配置"
          echo "当前平台: Windows"

      - name: Configure signing for CI (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "✅ Linux 环境：无需签名配置"
          echo "当前平台: Linux"

      - name: Build frontend
        run: pnpm run build

      - name: Get package version
        id: version
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const version = JSON.parse(fs.readFileSync('./package.json','utf8')).version;
            core.setOutput('version', version);
            return version;

      - name: Build Tauri App (No Release)
        if: github.event_name == 'pull_request'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: --target ${{ matrix.target }} --bundles ${{ matrix.bundle }} --verbose

      - name: Build Tauri App (With Release)
        if: github.event_name != 'pull_request'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          args: --target ${{ matrix.target }} --bundles ${{ matrix.bundle }} --verbose

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-artifacts
          path: |
            src-tauri/target/**/release/bundle/**/*.dmg
            src-tauri/target/**/release/bundle/**/*.msi
            src-tauri/target/**/release/bundle/**/*.exe
            src-tauri/target/**/release/bundle/**/*.app.tar.gz
          retention-days: 30
          if-no-files-found: warn

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: >
      always() &&
      needs.build.result == 'success' &&
      github.event_name != 'pull_request' &&
      (github.ref == 'refs/heads/main' ||
       startsWith(github.ref, 'refs/tags/') ||
       github.event.inputs.create_release == 'true')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get package version and tag info
        id: version
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const version = JSON.parse(fs.readFileSync('./package.json','utf8')).version;
            let tagName, isPrerelease = false;
            if (context.ref.startsWith('refs/tags/')) {
              tagName = context.ref.replace('refs/tags/','');
              isPrerelease = /beta|alpha|rc/i.test(tagName);
            } else if (context.ref === 'refs/heads/main') {
              tagName = `v${version}`;
            } else {
              tagName = `v${version}-build-${context.runNumber}`;
              isPrerelease = true;
            }
            core.setOutput('version', version);
            core.setOutput('tag_name', tagName);
            core.setOutput('is_prerelease', isPrerelease);

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display downloaded artifacts
        run: |
          echo "📦 Downloaded artifacts:"
          find ./artifacts -type f -name "*" | sort
          echo ""
          echo "📊 File sizes:"
          find ./artifacts -type f -exec ls -lh {} \; | awk '{print $5, $9}'

      - name: Organize & rename artifacts
        run: |
          set -e
          VERSION='${{ steps.version.outputs.version }}'
          mkdir -p ./release-files/{macos,windows}

          # macOS: 将 arm64 / x64 分开并重命名
          ARM_DMG=$(find ./artifacts -name "*.dmg" -path "*arm64*" | head -n 1 || echo "")
          X64_DMG=$(find ./artifacts -name "*.dmg" -path "*x64*" | head -n 1 || echo "")

          if [ -n "$ARM_DMG" ] && [ -f "$ARM_DMG" ]; then
            cp "$ARM_DMG" "./release-files/macos/digital-life_${VERSION}_mac_arm64.dmg"
            echo "✅ Found ARM64 DMG: $ARM_DMG"
          else
            echo "⚠️ ARM64 DMG not found"
          fi
          
          if [ -n "$X64_DMG" ] && [ -f "$X64_DMG" ]; then
            cp "$X64_DMG" "./release-files/macos/digital-life_${VERSION}_mac_x64.dmg"
            echo "✅ Found X64 DMG: $X64_DMG"
          else
            echo "⚠️ X64 DMG not found"
          fi

          # Windows files
          WIN_MSI=$(find ./artifacts -name "*.msi" | head -n 1 || echo "")
          WIN_EXE=$(find ./artifacts -name "*.exe" | head -n 1 || echo "")
          
          if [ -n "$WIN_MSI" ] && [ -f "$WIN_MSI" ]; then
            cp "$WIN_MSI" "./release-files/windows/digital-life_${VERSION}_windows_x64.msi"
            echo "✅ Found Windows MSI: $WIN_MSI"
          else
            echo "⚠️ Windows MSI not found"
          fi
          
          if [ -n "$WIN_EXE" ] && [ -f "$WIN_EXE" ]; then
            cp "$WIN_EXE" "./release-files/windows/digital-life_${VERSION}_windows_x64.exe"
            echo "✅ Found Windows EXE: $WIN_EXE"
          else
            echo "⚠️ Windows EXE not found"
          fi

          echo "📁 Final organized release files:"
          find ./release-files -type f | sort

      - name: Generate checksums
        run: |
          cd ./release-files
          find . -type f \( -name "*.dmg" -o -name "*.msi" -o -name "*.exe" \) -exec sha256sum {} \; > ../SHA256SUMS.txt
          echo "🔐 Generated checksums:"
          cat ../SHA256SUMS.txt

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          name: Digital Life ${{ steps.version.outputs.version }}
          body: |
            ## 🚀 Digital Life ${{ steps.version.outputs.version }}

            ### 📦 Downloads

            **🍎 macOS**
            - Apple Silicon (ARM64): `digital-life_${{ steps.version.outputs.version }}_mac_arm64.dmg`
            - Intel (x64): `digital-life_${{ steps.version.outputs.version }}_mac_x64.dmg`

            **🪟 Windows (x64)**
            - MSI Installer (推荐): `digital-life_${{ steps.version.outputs.version }}_windows_x64.msi`
            - EXE Setup: `digital-life_${{ steps.version.outputs.version }}_windows_x64.exe`

            ### 📋 Build Information
            - 🌿 Branch: `${{ github.ref_name }}`
            - ⏰ Build time: ${{ github.event.head_commit.timestamp || github.event.created_at }}
            - 📝 Commit: [`${{ github.sha }}`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            - 🏗️ Build number: `${{ github.run_number }}`

            ### 🔐 File Verification
            下载 `SHA256SUMS.txt` 文件来验证文件完整性。

            ### 💡 Installation Notes
            
            **🍎 macOS 安装说明**
            
            1. **下载 DMG 文件**：下载对应你 Mac 芯片的版本（ARM64 或 x64）
            
            2. **安装应用**：
               - 双击 DMG 文件打开
               - 将 digital-life 拖拽到 Applications 文件夹
            
            3. **首次运行**：
               - 按住 Control 键点击应用图标
               - 选择"打开" → 在弹窗中再次点击"打开"
               - 或者在"系统偏好设置" → "安全性与隐私"中允许运行
            
            4. **如果提示"已损坏"**，在终端运行：
               ```bash
               sudo xattr -rd com.apple.quarantine /Applications/digital-life.app
               ```
            
            **🪟 Windows 安装说明**
            - 推荐下载 MSI 安装包
            - 如果 SmartScreen 提示警告，点击"更多信息"然后"仍要运行"

            ### 📋 Changelog
            查看 [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) 了解详细更新内容。
          draft: ${{ github.event.inputs.draft == 'true' }}
          prerelease: ${{ steps.version.outputs.is_prerelease == 'true' }}
          files: |
            ./release-files/**/*
            ./SHA256SUMS.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload organized artifacts for backup
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ steps.version.outputs.version }}
          path: |
            ./release-files/**/*
            ./SHA256SUMS.txt
          retention-days: 90

  # 为 PR 提供构建状态反馈
  pr-summary:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && always()
    
    steps:
      - name: PR Build Summary
        uses: actions/github-script@v7
        with:
          script: |
            const buildResult = '${{ needs.build.result }}';
            const success = buildResult === 'success';
            
            const summary = success 
              ? '✅ **Build Successful** - All platforms built successfully!'
              : '❌ **Build Failed** - Check the build logs for details.';
            
            const details = `
            ## 🏗️ Build Summary
            
            ${summary}
            
            ### 📦 Platforms Built
            - 🍎 macOS (ARM64 + x64)
            - 🪟 Windows (x64)
            
            ### 📋 Next Steps
            ${success 
              ? '- Merge this PR to trigger a release build\n- The release will be created automatically after merge' 
              : '- Fix the build errors and push again\n- Check the Actions tab for detailed error logs'
            }
            `;
            
            console.log(details);
            core.summary.addRaw(details);
            await core.summary.write();